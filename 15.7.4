1.

//Комментарий типа пункт 5 - усиление:

// Важная проверка на размер аргументов
// если размеры разные, дальнейшее выполнение не имеет смысла
    if (list1.count() != list2.count()) {
        return result;
     }

2.

//Комментарий типа пункт 6 - TODO:

// TODO - Функция не используется,
// сделана заглушка, реализация откладывается
public void insertAfter(Node _nodeAfter, Node _nodeToInsert) {
}

3.

//Комментарий типа пункт 1 - информативный комментарий:

// Проверка на существование элемента в списке
    public boolean isValue(String str1) {

4.

//Комментарий типа пункт 4 - предупреждение о последствиях:

@Test // не запускайте тест, если словарь пуст
    void get() {

5.

//Комментарий типа пункт 3 - прояснения:

 // проверка на возможность обработки null
    nativeDictionary.put(null, null);

6.

//Комментарий типа пункт 2 - представление намерений:

// создадим словарь размером 20 элементов типа Object для хранения книг
NativeDictionary<Object> nativeDictionary = new NativeDictionary<>(20, Object.class);

7.

//Комментарий типа пункт 1 - информативный комментарий:

// метод возвращает все заданные элементы  в структуре ArrayList
ArrayList<Node<T>> getAll() {

8.

//Комментарий типа пункт 4 - предупреждение о последствиях:

// не изменяйте модификатор доступа,
//метод может использоваться только внутри класса
private int compareInt(int v1, int v2) {

9.

//Комментарий типа пункт 6 - TODO:

// TODO - в дальнейшем предполагается реализация для других типов,
// на данный момент только Integer и String
    public int compare(T v1, T v2) {
        if (v1 == null && v2 != null) {
            return -1;
        }

        if (v1 instanceof Integer && v2 instanceof Integer) {
            return compareInt((int) v1, (int) v2);
        }

        if (v1 instanceof String && v2 instanceof String) {
            return compareString((String) v1, (String) v2);
        }
        return 2;
    }

10.

//Комментарий типа пункт 5 - усиление:

// Порядок сортировки зависит от переменной asc
// обязательно должна быть проинициализированна в конструкторе
    private OrderedList(boolean asc) {


11.

//Комментарий типа пункт 3 - прояснение:

// коды ошибок согласно документации
 this.errorCode = errorCode;

12.

//Комментарий типа пункт 4 - предупреждение о последствиях:

 // динамический массив по умолчанию имеет начальную емкость 16 - не изменять!
    makeArray(16);

