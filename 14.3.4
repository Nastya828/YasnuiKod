3.1

1.
   public Stack() {
        //создание стека на основе структуры ArrayList
        stack = new ArrayList<>();
    }

2.

// Проверить, не пуст ли стек
    if (!stack.isEmpty()) {

3.

 // Массив байт, байты берем в стандартной кодировке UTF8
    byte[] bytes = key.getBytes(StandardCharsets.UTF_8);

4.

// метод, обрабатывающий ключ null
    private void putForNullKey(T value) {
        slots[0] = null;
        values[0] = value;
    }

5.

// метод для нахождения слота по hash - функции
    private int seekSlot(String value) {
        int index = hashFun(value);

6.

// в переменной filter выставляем 1 в разряде с номером x 
            filter = filter ^ (1 << x);

7.

// метод находит пересечение множеств
    public PowerSet intersection(PowerSet set2) {


3.2

1.

boolean add(T e);  //добавить элемент в конец очереди

// лучше поменять имя метода на:
boolean  addOfEndQueue(T e);

2.

T poll(); //удаляет верхний элемент очереди

// лучше поменять имя метода:
boolean  deleteFirstElement(T e);

3.

// лист с файлами заданной директории
ArrayList<Path> arrayList = findFile(path, "Task1.java"); 

// поменяем имя структуры ArrayList:
ArrayList<Path> pathesOfFilesList = findFile(path, "Task1.java"); 

4.

// путь текущей директории
File file = new File(".");

// поменяем имя File file:
File pathOfCurrentDir = new File(".");

5.

// строка для сохранения прочитанной строки из файла
String line = bufferedReader.readLine();

// поменяем имя line:
String  readedLineOfFile = bufferedReader.readLine();
